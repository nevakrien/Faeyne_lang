use crate::lexer::LexTag;
use crate::ast::{StringTable,Value};

grammar<'input>(input: &'input str, table: &mut StringTable<'input>);

extern {
    type Location = usize;
    type Error = ();

    // Enum definitions with lexer output for basic tokens
    enum LexTag {
        "pre_name" => LexTag::Name,
        "pre_atom" => LexTag::Atom,
        "pre_string" => LexTag::String,
        "pre_poison_str" => LexTag::PoisonString,
        "UK" => LexTag::Unknowen,

        // Keywords
        "import" => LexTag::Import,
        "def" => LexTag::FuncDec,
        "fn" => LexTag::Lambda,

        // Numbers
        "float" => LexTag::Float(<f64>),
        "int" => LexTag::Int(<Result<i64,f64>>),

        // Operators and others
        "." => LexTag::Dot,
        ";" => LexTag::Ender,
        "," => LexTag::Comma,

        "(" => LexTag::OpenParen,
        ")" => LexTag::CloseParen,
        "{" => LexTag::OpenCurly,
        "}" => LexTag::CloseCurly,
        "[" => LexTag::OpenSquare,
        "]" => LexTag::CloseSquare,
        "|" => LexTag::Pipe,

        "+" => LexTag::Plus,
        "-" => LexTag::Minus,
        "*" => LexTag::Mul,
        "/" => LexTag::Div,
        "div" => LexTag::IntDiv,
        "**" => LexTag::Pow,

        "%" => LexTag::Modolo,
        "&&" => LexTag::DoubleAnd,
        "||" => LexTag::DoubleOr,
        "^^" => LexTag::DoubleXor,

        "=" => LexTag::Eq,
        "==" => LexTag::DoubleEq,

        "<" => LexTag::Smaller,
        "<=" => LexTag::SmallerEq,
        ">" => LexTag::Bigger,

        "->" => LexTag::Arrow,
        "=>" => LexTag::SmallArrow,
    }
}

pub Atom: usize = {
    <start: @L> "pre_atom" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

pub String: usize = {
    <start: @L> "pre_string" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

pub PoisonString: usize = {
    <start: @L> "pre_poison_str" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

pub Name: usize = {
    <start: @L> "pre_name" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

// Rule to parse a function declaration with arguments
pub FuncDec: (usize, Vec<usize>) = {
    "def" <name:Name> <args:ArgList> => (name, args),
};


//Function arguments
ArgList: Vec<usize> = {
    // Multiple arguments separated by commas
    "(" <args:CommaSepArgs> ")" => args,

    // No arguments
    "(" ")" => vec![],
};

CommaSepArgs: Vec<usize> = {
    // Base case: multiple arguments
    <args:CommaSepArgs> "," <arg:Name> => {
        let mut arguments = args;
        arguments.push(arg);
        arguments
    },
    
    // Single argument
    <arg:Name> => vec![arg]
};

// Rule for parsing a value
pub Value: Value = {
    <x:Name> => Value::Variable(x),
    <x:FuncCall> => x,
    <x:"int"> => Value::Int(x),
    <x:"float"> => Value::Float(x),
};

pub FuncCall: Value = {
    <name:Name> "(" <args:CommaSepValue> ")" => Value::FuncCall {
        name: name,
        args: args
    }
};

// Rule for comma-separated values (function arguments)
pub CommaSepValue: Vec<Value> = {
    <args:CommaSepValue> "," <arg:Value> => {
        let mut arguments = args;
        arguments.push(arg);
        arguments
    },
    
    <arg:Value> => vec![arg],
};