use crate::lexer::LexTag;
use crate::ast::*;//{StringTable,Value,FunctionCall,FuncSig,FuncBlock,Statment};

grammar<'input>(input: &'input str, table: &mut StringTable<'input>);

extern {
    type Location = usize;
    type Error = ();

    // Enum definitions with lexer output for basic tokens
    enum LexTag {
        "name" => LexTag::Name,
        "atom" => LexTag::Atom,
        "string" => LexTag::String,
        "poison_str" => LexTag::PoisonString,
        "UK" => LexTag::Unknowen,

        // Keywords
        "import" => LexTag::Import,
        "def" => LexTag::FuncDec,
        "fn" => LexTag::Lambda,
        "return" => LexTag::Return,

        // Numbers
        "float" => LexTag::Float(<f64>),
        "int" => LexTag::Int(<Result<i64,f64>>),

        // Operators and others
        "." => LexTag::Dot,
        ";" => LexTag::Ender,
        "," => LexTag::Comma,

        "(" => LexTag::OpenParen,
        ")" => LexTag::CloseParen,
        "{" => LexTag::OpenCurly,
        "}" => LexTag::CloseCurly,
        "[" => LexTag::OpenSquare,
        "]" => LexTag::CloseSquare,
        "|>" => LexTag::Pipe,

        "+" => LexTag::Plus,
        "-" => LexTag::Minus,
        "*" => LexTag::Mul,
        "/" => LexTag::Div,
        "//" => LexTag::IntDiv,
        "**" => LexTag::Pow,

        "%" => LexTag::Modolo,
        "&&" => LexTag::DoubleAnd,
        "||" => LexTag::DoubleOr,
        "^^" => LexTag::DoubleXor,

        "|" => LexTag::Or,
        "^" => LexTag::Xor,

        "=" => LexTag::Eq,
        "==" => LexTag::DoubleEq,
        "!=" => LexTag::NotEq,

        "<" => LexTag::Smaller,
        "<=" => LexTag::SmallerEq,
        ">" => LexTag::Bigger,

        "=>" => LexTag::Arrow,
        "->" => LexTag::SmallArrow,
    }
}

//basic types:

Atom: usize = {
    <start: @L> "atom" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

String: usize = {
    <start: @L> "string" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

PoisonString: usize = {
    <start: @L> "poison_str" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

Name: usize = {
    <start: @L> "name" <end: @R> => {
        table.get_id(&input[start..end])
    }
};

//functions
Lammda: Lammda = {
    "fn" <sig:ArgList> <body:FuncBlock> => Lammda {
        sig,
        body,
    },
    "fn" <sig:ArgList> "->" <body:FuncBlock> => Lammda {
        sig,
        body,
    }
};

pub FuncDec: FuncDec = {
    "def" <sig:FuncSig> <body:FuncBlock> => FuncDec {
        sig,
        body,
    }
};

pub FuncSig: FuncSig = {
    <name:Name> <args:ArgList> => FuncSig{name, args},
};

ArgList: Vec<usize> = {
    "(" <args:CommaSepArgs> ")" => args,

    "(" ")" => vec![],
};

CommaSepArgs: Vec<usize> = {
    <args:CommaSepArgs> "," <arg:Name> => {
        let mut arguments = args;
        arguments.push(arg);
        arguments
    },
    
    <arg:Name> => vec![arg]
};

FValue : FValue = {
    <x:Name> => FValue::Name(x),
    <x:FuncCall> => FValue::FuncCall(Box::new(x)),
    <x:Lammda> => FValue::Lammda(Box::new(x)),
}

pub FuncCall: FunctionCall = {
    <name:FValue> "(" <args:CommaSepValue> ")" => FunctionCall {
        name: name,
        args: args
    },
    <name:FValue> "(" ")" => FunctionCall {
        name: name,
        args: vec![]
    },
};

CommaSepValue: Vec<Value> = {
    <args:CommaSepValue> "," <arg:Value> => {
        let mut arguments = args;
        arguments.push(arg);
        arguments
    },
    
    <arg:Value> => vec![arg],
};

//expressions
pub Value: Value = {
    
    #[precedence(level="0")]
    <x:Name> => Value::Variable(x),
    <x:Lammda> => Value::Lammda(Box::new(x)),
    <x:FuncCall> => Value::FuncCall(x),
    
    <x:Atom> => Value::Atom(x),
    <x:String> => Value::String(x),

    <x:"int"> => Value::Int(x),
    <x:"float"> => Value::Float(x),

    "-" <x:"int"> => Value::Int(match x {
        Ok(i) => Ok(-i),
        Err(f) => Err(-f),
    }),
    "-" <x:"float"> => Value::Float(x),

    #[precedence(level="1")] #[assoc(side="left")]
    <a:Value> <op:Op> <b:Value> => Value::FuncCall(FunctionCall {
        name: FValue::BuildIn(op),
        args: vec![a, b]
    })

};

Op: BuildIn = {
    "-" => BuildIn::Sub,
    "+" => BuildIn::Add,
    "*" => BuildIn::Mul,
    "/" => BuildIn::Div,
    "//" => BuildIn::IntDiv,
    "%" => BuildIn::Modulo,
    "**" => BuildIn::Pow,
    "==" => BuildIn::Equal,
    "<" => BuildIn::Smaller,
    ">" => BuildIn::Bigger,
    "<=" => BuildIn::SmallerEq,
    "&&" => BuildIn::DoubleAnd,
    "||" => BuildIn::DoubleOr,
    "^^" => BuildIn::DoubleXor,
    "|" => BuildIn::Or,
    "^" => BuildIn::Xor,
    "|>" => BuildIn::Pipe,
};


Statment : Statment = {
    <func:FuncCall> ";" => Statment::Call(func),
    <n:Name> "=" <x:Value> ";" => Statment::Assign(n,x),
}

// Function block, with optional return statement
pub FuncBlock: FuncBlock = {
    "{" <body:Statements> <ret:Return> "}" => FuncBlock {
        body: body,
        ret: Some(ret),
    },

    "{" <body:Statements> "}" => FuncBlock {
        body: body,
        ret: None,
    },

    "{" <ret:Return> "}" => FuncBlock {
        body: vec![],
        ret: Some(ret),
    },

    "{" "}" => FuncBlock {
        body: vec![],
        ret: None,
    },
};


Statements: Vec<Statment> = {
    <stmts:Statements> <stmt:Statment> => {
        let mut statements = stmts;
        statements.push(stmt);
        statements
    },
    
    <stmt:Statment> => vec![stmt],
};

Return: Value = {
    "return" <val:Value> ";" => val,
    <val:Value> => val,
};
